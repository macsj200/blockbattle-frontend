{"version":3,"sources":["utils/deck.ts","components/card.tsx","components/deck.tsx","components/player-hud.tsx","MyComponent.tsx","App.tsx","serviceWorker.js","index.js"],"names":["cardId","createDeck","_ref","numCards","state","deck","i","card","id","toString","category","effect","hitpoints","attack","push","jsx","spacing","height","width","padding","horizontal","vertical","margin","bottom","components_card","inPlayArea","isCurrentPlayer","playCard","attackingState","setAttackee","setAttacker","attackButton","Object","core_browser_esm","onClick","css","_templateObject","targetButton","_templateObject2","attackerId","attackeeId","_templateObject3","_templateObject4","style","display","flexDirection","marginBottom","_templateObject5","components_deck","title","drawCard","deck_templateObject","deck_templateObject2","deck_templateObject3","map","key","player_hud","playerCards","react_default","a","createElement","className","getCardsInState","filter","MyComponent","objectDestructuringEmpty","initialGameState","playerOneDeck","concat","toConsumableArray","playerTwoDeck","_useState","useState","_useState2","slicedToArray","game","setGame","_useState3","_useState4","setAttackingState","dispatchAction","action","objectSpread","console","log","player","App","src_MyComponent","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97f48945.chunk.js","sourcesContent":["export interface Card {\n  id: string,\n  category: string\n  effect: string,\n  hitpoints: number,\n  attack: number,\n  state: 'in_deck' | 'in_hand' | 'in_play'\n}\n\nlet cardId = 0\n\ninterface CreateDeckArgs {\n  numCards: number\n  state?: Card[\"state\"]\n}\n\nconst createDeck = ({\n  numCards, state\n}: CreateDeckArgs) : Card[] => {\n  let deck = [];\n  for(let i = 0; i < numCards; i++) {\n    const card : Card = {\n      id: cardId.toString(),\n      category: 'creature',\n      effect: 'none',\n      hitpoints: 10,\n      attack: 2,\n      state: state || 'in_deck',\n    }\n    cardId++\n    deck.push(card)\n  }\n  return deck;\n}\n\nexport { createDeck }","import React from \"react\";\nimport { Card } from '../utils/deck'\nimport { jsx, css } from '@emotion/core'\nimport { AttackingState } from \"../MyComponent\";\n/** @jsx jsx */\njsx;\n\n\ninterface Props {\n  isCurrentPlayer: boolean\n  card: Card\n  playCard?: (card: Card) => void\n  setAttacker: (card: Card) => void\n  setAttackee: (card: Card) => void\n  attackingState: AttackingState\n}\n\nconst spacing = {\n  card: {\n    height: '18.25rem',\n    width: '14rem',\n    padding: {\n      horizontal: '0.375rem',\n      vertical: '0.75rem',\n    },\n    margin: {\n      bottom: '10.25rem'\n    },\n  },\n  button: {\n    height: '3rem',\n  }\n}\n\nconst colors = {\n  button: {\n    backgroundColor: '#00ff8c',\n  }\n}\n\nexport default ({ isCurrentPlayer, card, playCard, attackingState, setAttackee, setAttacker } : Props) => {\n  const attackButton = (\n    <button\n      onClick={() => {\n        // Do attack\n        setAttacker(card)\n      }}\n      css={css`\n        background-color: #12ea88;\n        border: 2px #fff;\n        border-radius: 10px;\n        height: ${spacing.button.height};\n        color: #fff;\n        font-size: 1rem;\n  \n        &:active {\n          border: 2px #fff;\n          background-color: #00df5c;\n        }\n  \n        &:focus {\n          outline: none;\n        }\n      `}\n    >\n      Attack\n    </button>\n  )\n  \n  const targetButton = (\n    <button\n      onClick={() => {\n        // Do attack\n        setAttackee(card)\n      }}\n      css={css`\n        background-color: #6f12ea;\n        border: 2px #fff;\n        border-radius: 10px;\n        height: ${spacing.button.height};\n        color: #fff;\n        font-size: 1rem;\n  \n        &:active {\n          border: 2px #fff;\n          background-color: #4712ea;\n        }\n  \n        &:focus {\n          outline: none;\n        }\n      `}\n    >\n      Target\n    </button>\n  )\n  let inPlayArea\n  if (card.state === 'in_play') {\n    if (attackingState.attackerId) {\n      if (card.id === attackingState.attackerId) {\n        inPlayArea = <span>Attacking</span>\n      } else if (!isCurrentPlayer && !attackingState.attackeeId) {\n        inPlayArea = targetButton\n      }\n    } else if (isCurrentPlayer) {\n      inPlayArea = attackButton\n    }\n    if (attackingState.attackeeId === card.id) {\n      inPlayArea = <span>Targeted</span>\n    }\n  }\n  return (\n    <div\n      css={css`\n        border: 3px solid ${isCurrentPlayer ? '#16c58e' : '#c51645'};\n        border-radius: 10px;\n        padding: 0.75rem 1.25rem;\n      `}\n    >\n      <div css={css`\n        display: flex;\n        flex-direction: column;\n        height: ${spacing.card.height};\n        width: ${spacing.card.width};\n        padding: ${spacing.card.padding.vertical} ${spacing.card.padding.horizontal};\n      `}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            marginBottom: spacing.card.margin.bottom,\n          }}\n        >\n          <span>Id: {card.id}</span>\n          <span>Category: {card.category}</span>\n          <span>Effect: {card.effect}</span>\n          <span>HP: {card.hitpoints}</span>\n          <span>Attack: {card.attack}</span>\n        </div>\n        {playCard && card.state === 'in_hand' && isCurrentPlayer && <button\n          onClick={() => playCard(card)}\n          css={css`\n            background-color: #12ea88;\n            border: 2px #fff;\n            border-radius: 10px;\n            height: ${spacing.button.height};\n            color: #fff;\n            font-size: 1rem;\n  \n            &:active {\n              border: 2px #fff;\n              background-color: #00df5c;\n            }\n  \n            &:focus {\n              outline: none;\n            }\n          `}\n        >Play</button>}\n        {inPlayArea}\n      </div>\n    </div>\n  )\n}","import React from \"react\";\nimport { Card as CardType } from '../utils/deck'\nimport Card from '../components/card'\nimport { jsx, css } from '@emotion/core'\nimport { AttackingState } from \"../MyComponent\";\n/** @jsx jsx */\njsx;\n\n\ninterface Props {\n  isCurrentPlayer: boolean\n  deck: CardType[]\n  title: 'Deck' | 'Hand' | 'Board'\n  drawCard?: () => void\n  playCard?: (card: CardType) => void\n  setAttacker: (card: CardType) => void\n  setAttackee: (card: CardType) => void\n  attackingState: AttackingState\n}\n\nexport default ({ isCurrentPlayer, deck, title, drawCard, playCard, setAttacker, setAttackee, attackingState } : Props) => (\n  <div\n    css={css`\n      display: flex;\n      flex-direction: column;\n    `}\n  >\n    <h1>{title}</h1>\n    {title === 'Deck' && isCurrentPlayer && (\n      <button\n        onClick={drawCard}\n        css={css`\n          background-color: #12ea88;\n          border: 2px #fff;\n          border-radius: 10px;\n          height: 3rem;\n          margin-bottom: 0.75rem;\n          color: #fff;\n          font-size: 1.25rem;\n\n          &:active {\n            border: 2px #fff;\n            background-color: #00df5c;\n          }\n\n          &:focus {\n            outline: none;\n          }\n        `}\n      >\n        Draw\n      </button>\n    )}\n    <div css={css`\n      display: flex;\n      flex-flow: row wrap;\n      justify-content: space-between;\n\n      >* {\n        margin-bottom: 0.375rem;\n      }\n    `}>\n      {deck.map((card) => (\n        <Card\n          isCurrentPlayer={isCurrentPlayer}\n          playCard={playCard}\n          card={card}\n          key={card.id}\n          setAttackee={setAttackee}\n          setAttacker={setAttacker}\n          attackingState={attackingState}\n        />\n      ))}\n    </div>\n  </div>\n)","import React from 'react'\nimport Deck from './deck'\nimport { Card } from '../utils/deck';\nimport { getCardsInState, AttackingState } from '../MyComponent';\n\ninterface Props {\n  isCurrentPlayer: boolean\n  playerCards: Card[]\n  playCard: (card: Card) => void\n  drawCard: () => void\n  setAttacker: (card: Card) => void\n  setAttackee: (card: Card) => void\n  attackingState: AttackingState\n}\n\nexport default ({ isCurrentPlayer, playerCards, playCard, drawCard, setAttacker, setAttackee, attackingState } : Props) => {\n  return (\n    <div>\n      <h4>Player HUD</h4>\n      <div className=\"section\">\n        <Deck\n          isCurrentPlayer={isCurrentPlayer}\n          title=\"Board\"\n          deck={getCardsInState(playerCards, 'in_play')}\n          setAttacker={setAttacker}\n          setAttackee={setAttackee}\n          attackingState={attackingState}\n        />\n      </div>\n      <div className=\"section\">\n        <Deck\n          isCurrentPlayer={isCurrentPlayer}\n          title=\"Hand\"\n          deck={getCardsInState(playerCards, 'in_hand')}\n          playCard={playCard}\n          setAttacker={setAttacker}\n          setAttackee={setAttackee}\n          attackingState={attackingState}\n        />\n      </div>\n      <div className=\"section\">\n        <Deck\n          isCurrentPlayer={isCurrentPlayer}\n          title=\"Deck\"\n          drawCard={drawCard}\n          deck={getCardsInState(playerCards, 'in_deck')}\n          setAttacker={setAttacker}\n          setAttackee={setAttackee}\n          attackingState={attackingState}\n        />\n      </div>\n    </div>\n  )\n}","import React, { Component, useState } from \"react\";\nimport {\n  AccountData,\n  ContractData,\n  ContractForm,\n} from \"drizzle-react-components\";\nimport Deck from './components/deck';\nimport { createDeck, Card } from './utils/deck'\nimport PlayerHud from \"./components/player-hud\";\nimport { AllowedGameAction, DrawCardAction, PlayCardAction } from \"./actions\";\n\ninterface Props {\n}\n\nexport interface PlayerCards {\n  inDeck: Card[],\n  inHand: Card[],\n  inPlay: Card[],\n}\n\nexport interface GameState {\n  playerOneDeck: Card[],\n  playerTwoDeck: Card[],\n}\n\nexport const getCardsInState = (deck: Card[], state: Card[\"state\"]) => deck.filter((card) => card.state === state)\n\nconst gameReducer = (action: AllowedGameAction, prevState: GameState) : GameState => {\n  return prevState\n}\n\nconst getInitialGameState = () : GameState => {\n  return {\n    playerOneDeck: [\n      ...createDeck({ numCards: 2, state: 'in_play' }),\n      ...createDeck({ numCards: 3 }),\n    ],\n    playerTwoDeck: [\n      ...createDeck({ numCards: 2, state: 'in_play' }),\n      ...createDeck({ numCards: 3 }),\n    ],\n  }\n}\n\nexport interface AttackingState {\n  attackerId?: string\n  attackeeId?: string\n}\n\nconst MyComponent = ({ } : Props) => {\n  const initialGameState = getInitialGameState()\n  const [game, setGame] = useState<GameState>(initialGameState)\n\n  const [attackingState, setAttackingState] = useState<AttackingState>({})\n\n  const dispatchAction = (action: AllowedGameAction) => setGame(gameReducer(action, game))\n\n  const setAttacker = (card: Card) => setAttackingState({ ...attackingState, attackerId: card.id })\n  const setAttackee = (card: Card) => {\n    setAttackingState({ ...attackingState, attackeeId: card.id })\n    // TODO do attack\n    console.log('do attack', { ...attackingState, attackeeId: card.id })\n  }\n\n  const drawCard = (player: DrawCardAction[\"payload\"][\"player\"]) => () => {\n    const drawCardAction : DrawCardAction = {\n      type: 'DRAW_CARD',\n      payload: {\n        player,\n      }\n    }\n    dispatchAction(drawCardAction)\n  }\n\n  const playCard = (card: Card) => {\n    // Dispatch action\n    const playCardAction : PlayCardAction = {\n      type: 'PLAY_CARD',\n      payload: {\n        cardId: card.id\n      }\n    }\n    dispatchAction(playCardAction)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"section\">\n        {/* <ContractData contract=\"HearthClone\" method=\"cards\" methodArgs={[0]} /> */}\n      </div>\n      <div>\n        <h1>Player One</h1>\n        <PlayerHud\n          isCurrentPlayer={true}\n          playerCards={game.playerOneDeck}\n          playCard={playCard}\n          drawCard={drawCard('one')}\n          setAttacker={setAttacker}\n          setAttackee={setAttackee}\n          attackingState={attackingState}\n        />\n      </div>\n      <div>\n        <h1>Player Two</h1>\n        <PlayerHud\n          isCurrentPlayer={false}\n          playerCards={game.playerTwoDeck}\n          playCard={playCard}\n          drawCard={drawCard('two')}\n          setAttacker={setAttacker}\n          setAttackee={setAttackee}\n          attackingState={attackingState}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default MyComponent\n","import React, { Component } from \"react\";\nimport { DrizzleProvider } from \"drizzle-react\";\nimport { LoadingContainer } from \"drizzle-react-components\";\n\nimport \"./App.css\";\n\n// import drizzleOptions from \"./drizzleOptions\";\nimport MyContainer from \"./MyContainer\";\nimport MyComponent from \"./MyComponent\";\n\nclass App extends Component {\n  render() {\n    return (\n      <MyComponent />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}